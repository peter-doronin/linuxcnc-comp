component spindle_encoder;
option singleton yes;

pin in      signed  encoder-counts;
pin in      float   scale;
pin out     float   pos;
pin out     float   revs;
pin out     float   vel;
pin out     float   vel-rpm;
pin out     float   vel-rpm-abs;
pin io      bit     index-enable;

variable signed hWordFB; 
variable unsigned encoder_counts_last;
variable double pos_last;
variable double revs_offset;

function _ fp;

license "GPL"; // indicates GPL v2 or later
;;

#include "rtapi_math.h"
#
FUNCTION(_)
 {
    long counts;
    counts = (uint32_t)encoder_counts;
    if(((uint32_t)encoder_counts - (long)encoder_counts_last) > 100000000L) {hWordFB--;};
    if(((uint32_t)encoder_counts - (long)encoder_counts_last) < -100000000L) {hWordFB++;};
    counts += ((long)hWordFB << 32);
    encoder_counts_last = (uint32_t)encoder_counts;    
    pos = counts / scale;
    vel = (pos - pos_last) / fperiod;
    vel_rpm = vel * 60;
    vel_rpm_abs = fabs(vel_rpm);
    
    double pos_delta = fabs(pos - pos_last);
    pos_last = pos;
    
    double int_part;
    if(fabs(modf(pos, &int_part)) < pos_delta)
    {
		if(index_enable) 
		{
			index_enable = 0;
			revs_offset = -int_part;
		}
	}
    revs = pos + revs_offset;
    
 }

